{"version":3,"sources":["App.js","index.js"],"names":["App","state","countryData","regionExpanded","sortBy","toggleRegionExpanded","regionToggled","_this","getSortClass","sortType","region","newRegionData","_this$state","prevRegionData","sort","a","b","aDensity","population","area","name","newCountryData","Object","objectSpread","defineProperty","setState","renderContent","_this$state2","content","_loop","key","regionArray","push","react_default","createElement","className","onClick","map","country","idx","alpha2Code","capital","timezones","languages","Math","round","length","language","index","_this2","this","fetch","then","res","json","data","allData","reduce","all","item","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e14309da.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.scss'\n\nclass App extends Component {\n  state = {\n    countryData: {},\n    regionExpanded: null,\n    sortBy: 'name',\n  }\n\n  componentDidMount() {\n    fetch('https://restcountries.eu/rest/v1/all')\n      .then(res => res.json())\n      .then(data => {\n        if (data.length) {\n          const reformattedData = allData => {\n            return allData.reduce((all, item, idx) => {\n              if (!all[item.region]) {\n                all[item.region == '' ? 'no-region-given' : item.region] = [\n                  item,\n                ]\n              } else {\n                all[item.region].push(item)\n              }\n              return all\n            }, {})\n          }\n          this.setState({\n            countryData: reformattedData(data),\n          })\n        }\n      })\n  }\n\n  toggleRegionExpanded = regionToggled => {\n    // TODO: refactor the shape of the state\n    // I'm doing it like this becuase if you're sorting by population density on one region\n    // then click another region, the UI will display that its sorted by density\n    // but that sort hasn't happned yet. So I just default the sort by name\n    this.sortBy('name', regionToggled)\n  }\n\n  getSortClass = sortType => {\n    const { sortBy } = this.state\n    if (sortType === sortBy) {\n      return 'selected'\n    }\n    return ''\n  }\n\n  sortBy = (sortType, region) => {\n    const { countryData, regionExpanded } = this.state\n    const prevRegionData = countryData[regionExpanded || region]\n    let newRegionData\n    if (sortType === 'density') {\n      newRegionData = prevRegionData.sort((a, b) => {\n        const aDensity = a.population / a.area\n        const bDensity = b.population / b.area\n        return bDensity - aDensity\n      })\n    } else {\n      newRegionData = prevRegionData.sort((a, b) => {\n        return a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n      })\n    }\n\n    const newCountryData = {\n      ...countryData,\n      ...{\n        [regionExpanded || region]: newRegionData,\n      },\n    }\n    const setRegionExpanded = () => {\n      if (!region) {\n        return regionExpanded\n      } else if (regionExpanded === region) {\n        return ''\n      }\n      return region\n    }\n    this.setState({\n      sortBy: sortType,\n      countryData: newCountryData,\n      regionExpanded: setRegionExpanded(),\n    })\n  }\n\n  renderContent = () => {\n    const { countryData, regionExpanded } = this.state\n    const content = []\n    for (let key in countryData) {\n      const regionArray = countryData[key]\n      content.push(\n        <div key={key} className='region-block'>\n          <div className='region-name'>\n            <div\n              className='click-area'\n              onClick={() => this.toggleRegionExpanded(key)}\n            >\n              {key}\n            </div>\n            <div className={regionExpanded === key ? 'show' : 'hide'}>\n              <span\n                onClick={() => this.sortBy('name')}\n                className={this.getSortClass('name')}\n              >\n                Name\n              </span>\n              |\n              <span\n                onClick={() => this.sortBy('density')}\n                className={this.getSortClass('density')}\n              >\n                Population Density\n              </span>\n            </div>\n          </div>\n          <div className={regionExpanded === key ? 'show' : 'hide'}>\n            {regionArray.map((country, idx) => {\n              const {\n                alpha2Code,\n                capital,\n                region,\n                population,\n                area,\n                timezones,\n                languages,\n              } = country\n              return (\n                <div className='country' key={idx}>\n                  <div className='name'>{country.name}</div>\n                  <div className='country-info'>\n                    <div>\n                      <span>Alpha2Code:</span> {alpha2Code}\n                    </div>\n                    <div>\n                      <span>Capital:</span> {capital}\n                    </div>\n                    <div>\n                      <span>Region:</span> {region}\n                    </div>\n                    <div>\n                      <span>Population:</span> {population}\n                    </div>\n                    <div>\n                      <span>Area:</span> {area}\n                    </div>\n                    <div>\n                      <span>Population Density:</span>\n                      <br />\n                      {Math.round(population / area)} people per sq/mi\n                    </div>\n                    <div>\n                      <span>Number of Timezones:</span> {timezones.length}\n                    </div>\n                    <div>\n                      <span>Languages Spoken:</span>\n                      <ul>\n                        {languages.map((language, index) => (\n                          <li key={index}>{language}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        </div>,\n      )\n    }\n    return content\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        {this.renderContent()}\n        <div className='tips'>\n          ⚡Click a Region to expand. <br />\n          ⚡Hover for more details\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}